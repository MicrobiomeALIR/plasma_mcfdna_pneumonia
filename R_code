###################################################README############################################################
#####################################################################################################################
## This is a script for all the analyses from the following manuscript: 
## "Circulating microbial cell-free DNA is associated with inflammatory host-responses in severe pneumonia"
## Yang H, Haidar G, Al-Yousif NS, et al. Thorax 2021
## DOI:  10.1136/thoraxjnl-2020-216013
##
## We are also uploading in the same GitHub repo a de-sensitised dataset which includes: 
##  - Patient demographics, med Hist and clinical outcomes
##  - Microbial cell free DNA result summary
##  - Plasma inflammation biomarker measurements
##
## Please contact correspondance PI, Georgios D Kitsios MD PhD at kitsiosg[at]upmc.edu for further inquiry. 
## Last edited on Apr 01, 2021
#####################################################################################################################
## Setup
library(dplyr)
library(stringr)
library(ggpubr)
library(rstatix)
library(tidyr)
library(corrplot)
library(survival)
library(tidyverse)
library(tableone)
library(gridExtra)
rappidseq.karius.baseline.df <- read.csv(file = "./Mar02_2021_Thorax_R2_complete dataset.csv")
taxa_sum.rawfile <- read.csv(file = "Apr01_FigureS2_Sum_mcfDNA_by_taxa.csv")
#####################################################################################################################

## Main text, Result section
#### .." Of the 23 culture-positive subjects with detectable mcfDNA in plasma, only three (13%) were bacteremic. "
rappidseq.karius.baseline.df %>% filter(!is.na(total_microbial)) %>% mutate(HasREspPath = RespPath > 0) %>% group_by(bacteremia, pneum_category) %>% summarise(n())

#### .. "The majority (92%) of all detected mcfDNA sequences belonged to bacteria (Figure 1Bfigure 1B) and 65% of sequences were assigned to established respiratory pathogens"
rappidseq.karius.baseline.df %>% summarise(bacterial = sum(bacteria, na.rm = T), fungal = sum(fungi, na.rm = T), viral = sum(virus, na.rm = T)) / sum(rappidseq.karius.baseline.df$total_microbial, na.rm = T)
sum(rappidseq.karius.baseline.df$RespPath, na.rm = T) / sum(rappidseq.karius.baseline.df$total_microbial, na.rm = T)

## Main text, Discussion section
#### .. "we detected mcfDNA of respiratory pathogens in 91% and 40% of culture-positive and culture-negative patients"
rappidseq.karius.baseline.df %>% mutate(HasRespPath = RespPath > 0) %>% drop_na(total_microbial) %>% CreateTableOne(strata = "pneum_category", vars = "HasRespPath") %>% print(pDigits = 4, exact = "HasRespPath")

#####################################################################################################################

## Table 1: baseline characteristics, outcomes, host-response biomarkers and quantitative results of microbial cell-free DNA sequencing by clinical diagnosis
cat_var_table1 <- c("Gender", "HistCOPD", "HistImmunosuppression", "HistDiabetes", "Mortality30Day", "Hypoinflammatory")
cont_var_table1 <- c("Age", "BMI", "CPIS", "RSI", "VFD", "procalcitonin", "pentraxin3", "il6", "il8", "ang2", "st2", "rage", "tnfr1_final.new", "SOFAScRSD", "fractalkine", "total_microbial", "virus", "bacteria", "fungi", "RespPath", "microbe_w_unclear_importance")
rappidseq.karius.baseline.df <- rappidseq.karius.baseline.df %>% mutate(across(.cols = cat_var_table1, .fns = as.factor), across(.cols = cont_var_table1, .fns = as.numeric))

#### Main body table 1: descriptive stat and comparisons across 3 subgroup: 
Table1.main <- 
  rappidseq.karius.baseline.df %>% 
    CreateTableOne(strata = "pneum_category", 
                   vars = c("Age", "Gender", "HistCOPD", "HistImmunosuppression", "BMI", "HistDiabetes", "CPIS", "RSI", "SOFAScRSD", "VFD", "Mortality30Day", "Hypoinflammatory", "procalcitonin", "pentraxin3", "il6", "il8", "ang2", "st2", "rage", "tnfr1_final.new", "fractalkine", "total_microbial", "virus", "bacteria", "fungi", "RespPath", "microbe_w_unclear_importance")) %>% 
    print(pDigits = 4, contDigits = 1, 
          nonnormal = cont_var_table1, 
          exact = cat_var_table1, printToggle = FALSE) %>% as.data.frame() %>% mutate(var = str_remove_all(string = rownames(.), pattern = " .*$"))
#### Table 1 post hoc comparison between culture pos vs cx neg pneumonia
Table1.cxpos_v_cxneg_posthoc <-
  rbind(
    sapply(X = cat_var_table1, 
           FUN = function(index) {
             rappidseq.karius.baseline.df %>% 
               drop_na(!!rlang::sym(index)) %>% 
               group_by(!!rlang::sym(index), pneum_category) %>% summarise(n = n()) %>% spread(key = index, value = "n") %>% column_to_rownames(var = "pneum_category") %>% pairwise_fisher_test(p.adjust.method = "BH") %>% filter(group1 == "cxneg" & group2 == "cxpos") %>% transmute(col = index, p.adj) %>% unlist() %>% return()
           }) %>% t(), 
    sapply(X = c("total_microbial", "virus", "bacteria", "fungi", "RespPath", "microbe_w_unclear_importance"), 
           FUN = function(index) {
             rappidseq.karius.baseline.df %>% 
               mutate(across(.cols = cat_var_table1, .fns = as.factor), 
                      across(.cols = cont_var_table1, .fns = as.numeric)) %>% 
               drop_na(total_microbial) %>% # Filtering out 4 QC failure cases with no available mcfDNA result. 
               dunn_test(formula = as.formula(paste(index, "~ pneum_category")), p.adjust.method = "BH") %>% filter(group1 == "cxneg" & group2 == "cxpos") %>% transmute(col = index, p.adj) %>% unlist() %>% return()
           }) %>% t(), 
    sapply(X = c("Age", "BMI", "CPIS", "RSI", "VFD", "procalcitonin", "pentraxin3", "il6", "il8", "ang2", "st2", "rage", "tnfr1_final.new", "SOFAScRSD", "fractalkine"), 
           FUN = function(index) {
             rappidseq.karius.baseline.df %>% 
               mutate(across(.cols = cat_var_table1, .fns = as.factor), 
                      across(.cols = cont_var_table1, .fns = as.numeric)) %>% dunn_test(formula = as.formula(paste(index, "~ pneum_category")), p.adjust.method = "BH") %>% filter(group1 == "cxneg" & group2 == "cxpos") %>% transmute(col = index, p.adj) %>% unlist() %>% return()
           }) %>% t()
  )
#### Table 1 pneumonia vs control comparisons
Table1.PNA_v_control <- 
  rappidseq.karius.baseline.df %>% 
  mutate(pneum_category = pneum_category != "control") %>% # Merge cxpos and cxneg together, vs controls
  CreateTableOne(strata = "pneum_category", 
                 vars = c("Age", "Gender", "HistCOPD", "HistImmunosuppression", "BMI", "HistDiabetes", "CPIS", "RSI", "SOFAScRSD", "VFD", "Mortality30Day", "Hypoinflammatory", "procalcitonin", "pentraxin3", "il6", "il8", "ang2", "st2", "rage", "tnfr1_final.new", "fractalkine", "total_microbial", "virus", "bacteria", "fungi", "RespPath", "microbe_w_unclear_importance")) %>% 
  print(pDigits = 4, contDigits = 1, 
        nonnormal = cont_var_table1, 
        exact = cat_var_table1, printToggle = FALSE) %>% as.data.frame() %>% mutate(var = str_remove_all(string = rownames(.), pattern = " .*$")) %>% select(p, var)

#### Print the Table 1: 
Table1.main %>% 
  left_join(Table1.cxpos_v_cxneg_posthoc %>% as.data.frame(), by = c("var" = "col")) %>% 
  left_join(Table1.PNA_v_control, by = "var") %>% column_to_rownames(var = "var") %>% 
  transmute(control, cxneg, cxpos, P_value_3_group = p.x, P_cxpos_v_cxneg = p.adj, P_PNA_v_control = p.y) %>% 
  View()

#### For ARDS and hospital-acquired pneumonia, we included two column "ARDS" and "CDC_PNA_type" in our dataset. Please beware that both variables were not applicable in the control subgroup and thus should not be involved in comparison test. 
rappidseq.karius.baseline.df %>% filter(pneum_category != "control" & CDC_PNA_type != "none") %>% mutate(across(.cols = c(pneum_category, CDC_PNA_type), .fns = as.character)) %>% 
  CreateCatTable(vars = c("ARDS", "CDC_PNA_type"), strata = "pneum_category") %>% print(exact = c("ARDS", "CDC_PNA_type"))

#### For "Presence of respiratory path", we have to further correct for the QC failure cases
rappidseq.karius.baseline.df %>% mutate(HasRespPath = RespPath > 0) %>% drop_na(total_microbial) %>% CreateTableOne(strata = "pneum_category", vars = "HasRespPath") %>% print(pDigits = 4, exact = "HasRespPath")
rappidseq.karius.baseline.df %>% mutate(HasRespPath = RespPath > 0) %>% drop_na(total_microbial) %>% group_by(HasRespPath, pneum_category) %>% summarise(n = n()) %>% drop_na() %>% spread(key = "HasRespPath", value = "n") %>% column_to_rownames("pneum_category") %>% pairwise_fisher_test(p.adjust.method = "BH")
rappidseq.karius.baseline.df %>% mutate(HasRespPath = RespPath > 0, pneum_category = pneum_category != "control") %>% drop_na(total_microbial) %>% CreateTableOne(strata = "pneum_category", vars = "HasRespPath") %>% print(pDigits = 4, exact = "HasRespPath")

#####################################################################################################################
## Figure 1: 
#### Fig1A
options(scipen = 999)
rappidseq.karius.mcfDNA_log <- 
  rappidseq.karius.baseline.df %>% drop_na(total_microbial) %>% 
  mutate(across(.cols = c(total_microbial, RespPath, microbe_w_unclear_importance), .fns = ~ifelse(test = .x <= 1, yes = 0, no = log(.x)), .names = "{.col}.log"))

total_mcf.posthoc.p <- 
  rappidseq.karius.mcfDNA_log %>%
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
  rstatix::dunn_test(total_microbial.log ~ pneum_category, p.adjust.method = "BH") %>% rstatix::add_xy_position(x = "pneum_category") %>% 
  mutate(p.adj.formatted = ifelse(p.adj < 0.0001, yes = "<0.0001", no = as.character(round(p.adj, digits = 4)))) 

rappidseq.karius.mcfDNA_log %>% 
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
  ggboxplot(x = "pneum_category", y = "total_microbial.log", add = "jitter") + stat_pvalue_manual(total_mcf.posthoc.p, label = "p.adj.formatted") + 
  ylab("Total plasma mcfDNA load MPMs, log") + xlab("") -> Fig1A.v10



#### Fig 1B
rappidseq.karius.baseline.df %>% group_by(pneum_category) %>% summarise(bacterial = sum(bacteria, na.rm = T), fungal = sum(fungi, na.rm = T), viral = sum(virus, na.rm = T)) %>% ungroup() %>% gather_(key_col = "Kingdom", value_col = "sum_MPM", gather_cols = c("bacterial", "fungal", "viral")) %>% left_join(rappidseq.karius.baseline.df %>% group_by(pneum_category) %>% summarise(cat_MPM_total = sum(total_microbial, na.rm = TRUE))) %>% 
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive")), 
         Kingdom = factor(case_when(Kingdom == "fungal" ~ 0, Kingdom == "viral" ~ 1, Kingdom == "bacterial" ~ 2), labels = c("Fungal", "Viral", "Bacterial"))) %>% 
  ggplot(aes(x = sqrt(cat_MPM_total) / 2, y = sum_MPM, fill = Kingdom, width = sqrt(cat_MPM_total))) + 
  geom_bar(stat = "identity", position = "fill", colour = "black", size = 0.1) + coord_polar("y", start = 0) + facet_wrap(~pneum_category) + xlab("") + ylab("") + 
  theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), 
        axis.text.y = element_blank(), axis.ticks.y = element_blank()) + 
  scale_fill_brewer(palette = "Dark2") -> Fig1B.v10

#### Fig 1 

Fig1.blank.placeholder <- ggplot() + theme_void()

gridExtra::grid.arrange(Fig1A.v10 + labs(title = "A") + theme(plot.title.position = "plot"), 
                        Fig1B.v10 + theme(legend.title = element_blank()), 
                        Fig1.blank.placeholder  + labs(title = "B"), 
                        #Fig1C.v4 + labs(title = "C") + theme(plot.title.position = "plot"), 
                        layout_matrix =     matrix(c(rep(c(rep(1,9), NA), 2), 3, rep(2, 9)), nrow = 3, byrow = T))


#### Annotation in Fig 1B: total and breakdown by kingdom of mcfDNA composition, stratified in clinical subgroup
rappidseq.karius.baseline.df %>% group_by(pneum_category) %>% summarise(total = sum(total_microbial, na.rm = TRUE), bacterial = sum(bacteria, na.rm = T), fungal = sum(fungi, na.rm = T), viral = sum(virus, na.rm = T)) 
#### Fig 1B legend text, proportion:
rappidseq.karius.baseline.df %>% group_by(pneum_category) %>% summarise(bacterial = sum(bacteria, na.rm = T), fungal = sum(fungi, na.rm = T), viral = sum(virus, na.rm = T)) %>% ungroup() %>% gather_(key_col = "Kingdom", value_col = "sum_MPM", gather_cols = c("bacterial", "fungal", "viral")) %>% left_join(rappidseq.karius.baseline.df %>% group_by(pneum_category) %>% summarise(cat_MPM_total = sum(total_microbial, na.rm = TRUE))) %>% 
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive")), 
         Kingdom = factor(case_when(Kingdom == "fungal" ~ 0, Kingdom == "viral" ~ 1, Kingdom == "bacterial" ~ 2), labels = c("Fungal", "Viral", "Bacterial"))) %>% 
  mutate(percentage = sum_MPM / cat_MPM_total) %>% select(-c(sum_MPM, cat_MPM_total)) %>% spread(key = "Kingdom", value = "percentage") %>% print()



#####################################################################################################################
## Figure 2: Circulating mcfDNA is associated with host inflammatory responses in patients with pneumonia. 

#### Fig 2A: regression
rappidseq.karius.univar <- 
  rappidseq.karius.mcfDNA_log %>% 
  mutate(across(.cols = c("procalcitonin", "pentraxin3", "il6", "il8", "ang2", "st2", "rage", "tnfr1_final.new", "fractalkine"), 
                .fns = ~ifelse(test = .x <= 1 , yes = 0, no = log(.x)), .names = "{.col}log"))


univar.formula.gen <- function(markerlog, MPMcatlog = "RespPath.log"){
  paste(markerlog, "~", MPMcatlog, sep = " ")
}
get.result.from.univar <- function(formula_input){
  univar.lm <- rappidseq.karius.univar %>% filter(pneum_category != "control") %>% lm(formula = formula_input) %>% summary()
  univar.coninf <- rappidseq.karius.univar %>% filter(pneum_category != "control") %>% lm(formula = formula_input) %>% confint()
  return(c(univar.lm[["coefficients"]][2, c(1, 4)], univar.coninf[2, 1:2]))
}

multivar.formula.gen <- function(markerlog, MPMcatlog = "RespPath.log"){
  paste(markerlog, "~", MPMcatlog, "+ Age + HistCOPD + HistImmunosuppression + RSI + pneum_category + ragelog", sep = " ")}

get.result.from.lm.formula <- function(formula_input){
  univar.lm <- rappidseq.karius.univar %>% filter(pneum_category != "control") %>% 
    mutate(Clinical_irrelevant_microbes = total_microbial - RespPath,
           Clinical_irrelevant_microbes.log = ifelse(Clinical_irrelevant_microbes <= 1, yes = 0, no = log(Clinical_irrelevant_microbes))) %>% 
    lm(formula = formula_input) %>% summary()
  univar.coninf <- rappidseq.karius.univar %>% filter(pneum_category != "control") %>% mutate(Clinical_irrelevant_microbes = total_microbial - RespPath, Clinical_irrelevant_microbes.log = ifelse(Clinical_irrelevant_microbes <= 1, yes = 0, no = log(Clinical_irrelevant_microbes))) %>% lm(formula = formula_input) %>% confint()
  return(c(univar.lm[["coefficients"]][2, c(1, 4)], univar.coninf[2, 1:2]))
}

total.lm.result.df <- 
  rbind(
    sapply(X = sapply(c("st2log", "il6log", "il8log", "ang2log", "pentraxin3log", "procalcitoninlog", "tnfr1_final.newlog", "ragelog", "fractalkinelog"), univar.formula.gen, MPM = "total_microbial.log"), 
           FUN = get.result.from.lm.formula) %>% round(digits = 4), 
    sapply(X = sapply(c("st2log", "il6log", "il8log", "ang2log", "pentraxin3log", "procalcitoninlog", "tnfr1_final.newlog", "ragelog", "fractalkinelog"), multivar.formula.gen, MPM = "total_microbial.log"), 
           FUN = get.result.from.lm.formula) %>% round(digits = 4)
  )
rownames(total.lm.result.df) <-  c("Univariate regression coefficient", "Univariate p value", "univariate 2.5%", "univariate 97.5%", 
                                   "multivariate regression coefficient", "multivariate p value", "multivariate 2.5%", "multivariate 97.5%")
colnames(total.lm.result.df) <- c("ST-2", "IL-6", "IL-8", "Ang-2", "Pentraxin3", "Procalcitonin", "TNFR1", "RAGE", "Fractalkine")


resppath.lm.result.df <- 
  rbind(
    sapply(X = sapply(c("st2log", "il6log", "il8log", "ang2log", "pentraxin3log", "procalcitoninlog", "tnfr1_final.newlog", "ragelog", "fractalkinelog"), univar.formula.gen, MPM = "RespPath.log"), 
           FUN = get.result.from.lm.formula) %>% round(digits = 4), 
    sapply(X = sapply(c("st2log", "il6log", "il8log", "ang2log", "pentraxin3log", "procalcitoninlog", "tnfr1_final.newlog", "ragelog", "fractalkinelog"), multivar.formula.gen, MPM = "RespPath.log"), 
           FUN = get.result.from.lm.formula) %>% round(digits = 4)
  )
rownames(resppath.lm.result.df) <-  c("Univariate regression coefficient", "Univariate p value", "univariate 2.5%", "univariate 97.5%", 
                                      "multivariate regression coefficient", "multivariate p value", "multivariate 2.5%", "multivariate 97.5%")
colnames(resppath.lm.result.df) <- c("ST-2", "IL-6", "IL-8", "Ang-2", "Pentraxin3", "Procalcitonin", "TNFR1", "RAGE", "Fractalkine")


#### Format and print Fig 2A: 
total.lm.result.df %>% t() %>% as.data.frame() %>% rownames_to_column(var = "Biomarker") %>% 
  transmute(Biomarker, univ_coef = paste(as.character(round(`Univariate regression coefficient`, digits = 2)), " (", 
                                         as.character(round(`univariate 2.5%`, digits = 2)), ", ", 
                                         as.character(round(`univariate 97.5%`, digits = 2)), ")", sep = ""), 
            univ_p = paste(ifelse(test = `Univariate p value` <= 0.05, yes = ifelse(test = `Univariate p value` < 0.0001, no = round(`Univariate p value`, digits = 4), yes = "<0.0001"), no = round(`Univariate p value`, digits = 2))), 
            multi_coef = paste(as.character(round(`multivariate regression coefficient`, digits = 2)), " (", 
                               as.character(round(`multivariate 2.5%`, digits = 2)), ", ", 
                               as.character(round(`multivariate 97.5%`, digits = 2)), ")", sep = ""), 
            multi_p = paste(ifelse(test = `multivariate p value` <= 0.05, yes = ifelse(test = `multivariate p value` < 0.0001, no = round(`multivariate p value`, digits = 4), yes = "<0.0001"), no = round(`multivariate p value`, digits = 2))) 
  ) %>% 
  transmute(Biomarker, 
            univ_summary = paste(univ_coef, univ_p, sep = ", "), 
            multiv_summary = paste(multi_coef, multi_p, sep = ", ")) %>% filter(Biomarker != "IL10") %>% 
  mutate(multiv_summary = ifelse(Biomarker == "RAGE", yes = NA_character_, no = multiv_summary)) %>% View()

#### Fig 2B: Patients with pneumonia assigned to the hyperinflammatory subphenotype had significantly higher mcfDNA compared tocompared with hypoinflammatory patients


rappidseq.karius.univar %>% filter(pneum_category != "control" & !is.na(Hypoinflammatory)) %>% 
  ggboxplot(x = "Hypoinflammatory", y = "total_microbial.log", add = "jitter") + theme(plot.title.position = "plot") + 
  xlab("Host-response Subphenotypes") + ylab("Total plasma mcfDNA MPMs, log") + scale_x_discrete(labels = c("FALSE" = "Hyperinflammatory", "TRUE" = "Hypoinflammatory")) + 
  theme(axis.text.x = element_text(colour = c("red", "blue"))) + stat_compare_means(comparisons = list(c("FALSE", "TRUE"))) -> Fig2B.v10
print(Fig2B.v10)
#####################################################################################################################
## Figure S1: No significant difference in mcfDNA by community-acquired pneumonia vs hospital-acquired pneumonia
rappidseq.karius.univar %>% filter(pneum_category != "control") %>% ggboxplot(x = "CDC_PNA_type", y = "total_microbial.log", add = "jitter")  + stat_compare_means()

## Figure S2: Sum of total mcfDNA load detected across all participants by taxa

#### Fig S2A: respiratory pathogen
taxa_sum.rawfile %>%
  filter(Category == "RespPath") %>% arrange(BUG_TOTAL) %>% 
  mutate(TAXA = factor(x = row_number(), labels = SIGNIFICANT_BUG_CALLS)) %>% 
  ggplot(aes(x = BUG_TOTAL, y = TAXA)) + geom_bar(stat = "identity") + ylab("") + ggtitle("A") + xlab("Total MPMs")
#### Fig S2B: microbes with unclear clinical relevance
taxa_sum.rawfile %>%
  filter(Category != "RespPath") %>% arrange(BUG_TOTAL) %>% 
  mutate(TAXA = factor(x = row_number(), labels = SIGNIFICANT_BUG_CALLS)) %>% 
  ggplot(aes(x = BUG_TOTAL, y = TAXA)) + geom_bar(stat = "identity") + ylab("") + ggtitle("B") + xlab("Total MPMs")

## Figure S3

#### Fig S3A: Time of sampling from ICU admission and intubation between culture positive and culture negative patients.
grid.arrange(
  rappidseq.karius.baseline.df %>% filter(pneum_category != "control") %>% ggplot(aes(x = pneum_category, y = timesamplefromicuadmission))+ geom_beeswarm(size = .8) + stat_compare_means() + xlab("") + ylab("Sample time since ICU admission, day") + scale_x_discrete(labels = c("cxneg" = "Culture negative", "cxpos" = "Culture positive")), 
  rappidseq.karius.baseline.df %>% filter(pneum_category != "control") %>% ggplot(aes(x = pneum_category, y = timesamplefromintubation)) + geom_beeswarm(size = .8) + stat_compare_means() +xlab("") + ylab("Sample time since intubation, day") + scale_x_discrete(labels = c("cxneg" = "Culture negative", "cxpos" = "Culture positive")), 
  ncol = 2
)

#### Fig S3B: Procalcitonin levels did not differ by time of sampling from ICU admission or intubation
grid.arrange(
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% 
    mutate(timesamplefromintubation = 
             factor(case_when(timesamplefromintubation == 0 ~ 0, 
                              timesamplefromintubation == 1 ~ 1, 
                              timesamplefromintubation >= 2 ~ 2), labels = 0:2)) %>% 
    ggboxplot(x = "timesamplefromintubation", y = "procalcitoninlog", add = "jitter") + stat_compare_means() + 
    scale_x_discrete(labels = c("0" = "0", "1" = "1", "2" = parse(text = latex2exp::TeX("$\\geq 2$")))) + 
    ylab("Procalcitonin, log") + xlab("Sample time since intubation, day"), 
  
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% 
    mutate(timesamplefromicuadmission = factor(
      case_when(timesamplefromicuadmission == 0 ~ 0, 
                timesamplefromicuadmission == 1 ~ 1, 
                timesamplefromicuadmission == 2 ~ 2, 
                timesamplefromicuadmission >= 3 ~ 3)
    )) %>% 
    ggboxplot(x = "timesamplefromicuadmission", y = "procalcitoninlog", add = "jitter") + stat_compare_means() + scale_x_discrete(labels = c("0", "1", "2", "3" = parse(text = latex2exp::TeX("$\\geq 3$")))) + 
    xlab("Sample time since ICU admission, day") + ylab("Procalcitonin, log"), 
  ncol = 2)


#### Fig S3C: McfDNA levels did not differ by time of sampling from ICU admission or intubation
grid.arrange(
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% mutate(total_microbial.log = ifelse(total_microbial <= 1, no = log(total_microbial), yes = 0)) %>% 
    mutate(timesamplefromintubation = 
             factor(case_when(timesamplefromintubation == 0 ~ 0, 
                              timesamplefromintubation == 1 ~ 1, 
                              timesamplefromintubation >= 2 ~ 2), labels = 0:2)) %>% 
    ggboxplot(x = "timesamplefromintubation", y = "total_microbial.log", add = "jitter", ylim = c(0, 13)) + stat_compare_means() + 
    scale_x_discrete(labels = c("0" = "0", "1" = "1", "2" = parse(text = latex2exp::TeX("$\\geq 2$")))) + 
    ylab("mcfDNA MPM, log") + xlab("Sample time since intubation, day"), 
  
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% mutate(total_microbial.log = ifelse(total_microbial <= 1, no = log(total_microbial), yes = 0)) %>% 
    mutate(timesamplefromicuadmission = factor(
      case_when(timesamplefromicuadmission == 0 ~ 0, 
                timesamplefromicuadmission == 1 ~ 1, 
                timesamplefromicuadmission == 2 ~ 2, 
                timesamplefromicuadmission >= 3 ~ 3)
    )) %>% 
    ggboxplot(x = "timesamplefromicuadmission", y = "total_microbial.log", add = "jitter", ylim = c(0, 13)) + stat_compare_means() + 
    scale_x_discrete(labels = c("0", "1", "2", "3" = parse(text = latex2exp::TeX("$\\geq 3$")))) + 
    ylab("mcfDNA MPM, log") + xlab("Sample time since ICU admission, day"), 
  ncol = 2
)


#### Fig S3D: Procalcitonin and mcfDNA levels were not significantly associated with the antibiotic exposure score (https://pubmed.ncbi.nlm.nih.gov/24614401/)
grid.arrange(
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% ggplot(aes(x = Murray.abx.score, y = procalcitoninlog)) + geom_point() + 
    geom_smooth(method = "lm") + stat_cor() + ylab("Procalcitonin, log") + xlab("Abx exposure score"), 
  rappidseq.karius.univar %>% filter(pneum_category != "control") %>% ggplot(aes(x = Murray.abx.score, y = total_microbial.log)) + 
    geom_point() + geom_smooth(method = "lm") + stat_cor() + ylab("mcfDNA MPM, log") + xlab("Abx exposure score"), 
  ncol = 2
)


## Fig S4: Hyperinflammatory patients with pneumonia had higher levels of mcfDNA belonging to recognized respiratory pathogens compared to hypo-inflammatory patients (left panel), but no difference in levels of mcfDNA belonging to microbes with unclear clinical importance.
grid.arrange(
  rappidseq.karius.mcfDNA_log %>% filter(pneum_category != "control") %>% drop_na(Hypoinflammatory) %>% ggboxplot(x = "Hypoinflammatory", y = "RespPath.log", add = "jitter") + stat_compare_means(), 
  rappidseq.karius.mcfDNA_log %>% filter(pneum_category != "control") %>% drop_na(Hypoinflammatory) %>% ggboxplot(x = "Hypoinflammatory", y = "microbe_w_unclear_importance.log", add = "jitter") + stat_compare_means(), 
  ncol = 2  
)
## Fig S5: Resp path and microbe w/ unclear significance: comparisons
RespPath_mcf.posthoc.p <- 
  rappidseq.karius.mcfDNA_log %>%
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
  rstatix::dunn_test(RespPath.log ~ pneum_category, p.adjust.method = "BH") %>% rstatix::add_xy_position(x = "pneum_category") %>% 
  mutate(p.adj.formatted = ifelse(p.adj < 0.0001, yes = "<0.0001", no = as.character(round(p.adj, digits = 4)))) 

Unclear_mcf.posthoc.p <- 
  rappidseq.karius.mcfDNA_log %>%
  mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                 labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
  rstatix::dunn_test(microbe_w_unclear_importance.log ~ pneum_category, p.adjust.method = "BH") %>% rstatix::add_xy_position(x = "pneum_category") %>% 
  mutate(p.adj.formatted = ifelse(p.adj < 0.0001, yes = "<0.0001", no = as.character(round(p.adj, digits = 4)))) 

grid.arrange(
  ncol = 2, 
  rappidseq.karius.mcfDNA_log %>% 
    mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                   labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
    ggboxplot(x = "pneum_category", y = "RespPath.log", add = "jitter") + stat_pvalue_manual(RespPath_mcf.posthoc.p, label = "p.adj.formatted"), 
  
  rappidseq.karius.mcfDNA_log %>% 
    mutate(pneum_category = factor(case_when(pneum_category == "cxpos" ~ 3, pneum_category == "cxneg" ~ 2, pneum_category == "control" ~ 1), 
                                   labels = c("Control", "Culture Negative", "Culture Positive"))) %>% 
    ggboxplot(x = "pneum_category", y = "microbe_w_unclear_importance.log", add = "jitter") + stat_pvalue_manual(Unclear_mcf.posthoc.p, label = "p.adj.formatted") 
  
  
)









